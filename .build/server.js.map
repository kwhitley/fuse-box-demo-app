{"version":3,"sources":["/server/index.js"],"names":["app","PRODUCTION","process","env","NODE_ENV","PORT","server","require","createServer","use","bodyParser","json","urlencoded","extended","isDevBuildMode","BUILD_MODE","staticPath","path","join","__dirname","console","log","express","static","get","req","res","foo","mode","port","test","TEST","production","setTimeout","fs","readFile","err","data","pkg","JSON","parse","chance","Math","random","status","send","listen"],"mappings":";;;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;;;;;;;MARA;;;AAOA;;;AAGA;AACA,IAAMA,MAAM,wBAAZ;AACA,IAAMC,aAAaC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA5C;AACA,IAAMC,OAAOH,QAAQC,GAAR,CAAYE,IAAZ,IAAoB,IAAjC;AACA,IAAMC,SAASC,QAAQ,MAAR,EAAgBC,YAAhB,CAA6BR,GAA7B,CAAf;;AAEAA,IAAIS,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACAX,IAAIS,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAb,IAAIS,GAAJ,CAAQ,4BAAR;;AAEA;AACA,IAAMK,iBAAiBZ,QAAQC,GAAR,CAAYY,UAAZ,KAA2B,KAAlD;AACA,IAAMC,aAAaC,eAAKC,IAAL,CAAUC,SAAV,WAA2BL,iBAAiB,QAAjB,GAA4B,MAAvD,cAAnB;AACAM,QAAQC,GAAR,kCAA2CL,UAA3C;AACAhB,IAAIS,GAAJ,CAAQa,kBAAQC,MAAR,CAAeP,UAAf,CAAR;AACA;;AAEA;AACAhB,IAAIwB,GAAJ,CAAQ,OAAR,EAAiB,UAACC,GAAD,EAAMC,GAAN;AAAA,SACfA,IAAIf,IAAJ,CAAS;AACPgB,SAAK,KADE;AAEPC,UAAM1B,QAAQC,GAAR,CAAYC,QAFX;AAGPyB,UAAM3B,QAAQC,GAAR,CAAYE,IAHX;AAIPyB,UAAM5B,QAAQC,GAAR,CAAY4B,IAJX;AAKPC,gBAAY/B;AALL,GAAT,CADe;AAAA,CAAjB;;AAUA;AACAD,IAAIwB,GAAJ,CAAQ,eAAR,EACE,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcO,WAAW,YAAM;AAC7BC,iBAAGC,QAAH,CACElB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,iBAArB,CADF,EAEE,MAFF,EAGE,UAACiB,GAAD,EAAMC,IAAN,EAAe;AACb,UAAID,GAAJ,EAAS,MAAMA,GAAN;;AAET,UAAME,MAAMC,KAAKC,KAAL,CAAWH,IAAX,CAAZ;AACA,UAAMI,SAASC,KAAKC,MAAL,KAAgB,GAA/B;;AAEA,aAAQF,UAAUf,IAAIf,IAAJ,CAAS2B,GAAT,CAAX,IAA6BZ,IAAIkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAApC;AACD,KAVH;AAYD,GAba,EAaX,IAbW,CAAd;AAAA,CADF;;AAiBAvC,OAAOwC,MAAP,CAAczC,IAAd;AACAe,QAAQC,GAAR,wCAAiDhB,IAAjD,WAA0DJ,aAAa,YAAb,GAA4B,aAAtF;;;;;;;;;;;;0BA9CMD,G;0BACAC,U;0BACAI,I;0BACAC,M;0BAOAQ,c;0BACAE,U","file":"","sourcesContent":["// include other main deps\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport compression from 'compression'\nimport path from 'path'\nimport fs from 'fs'\n\n// load .env using dotenv first\nimport ENV from 'env-autoload'\n\n// instantiate express\nconst app = express()\nconst PRODUCTION = process.env.NODE_ENV === 'production'\nconst PORT = process.env.PORT || 3000\nconst server = require('http').createServer(app)\n\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(compression())\n\n// static serving from /dist/client\nconst isDevBuildMode = process.env.BUILD_MODE === 'dev'\nconst staticPath = path.join(__dirname, `../${isDevBuildMode ? '.build' : 'dist'}/client`)\nconsole.log(`serving static content from ${staticPath}`)\napp.use(express.static(staticPath))\n// app.use('/client', express.static(staticPath))\n\n// example API entry\napp.get('/test', (req, res) =>\n  res.json({\n    foo: 'BAZ',\n    mode: process.env.NODE_ENV,\n    port: process.env.PORT,\n    test: process.env.TEST,\n    production: PRODUCTION,\n  })\n)\n\n// json import support\napp.get('/package.json',\n  (req, res) => setTimeout(() => {\n    fs.readFile(\n      path.join(__dirname, '../package.json'),\n      'utf8',\n      (err, data) => {\n        if (err) throw err\n\n        const pkg = JSON.parse(data)\n        const chance = Math.random() > 0.4\n\n        return (chance && res.json(pkg)) || res.status(403).send()\n      }\n    )\n  }, 1000)\n)\n\nserver.listen(PORT)\nconsole.log(`Express server @ http://localhost:${PORT} (${PRODUCTION ? 'production' : 'development'})\\n`)\n"]}