{"version":3,"sources":["/src/server/index.js"],"names":[],"mappings":";;;;;;;;;;AAAA,0BAA0B;AAC1B,qCAA6B;AAC7B,6CAAoC;AACpC,6CAAqC;AACrC,+BAAuB;AACvB,2BAAmB;AACnB,yCAAyC;AAEzC,+BAA+B;AAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAA;AAE1B,sBAAsB;AACtB,MAAM,GAAG,GAAG,iBAAO,EAAE,CAAA;AACrB,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,CAAA;AAE1D,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAA;AAC1B,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAA;AACnD,GAAG,CAAC,GAAG,CAAC,qBAAW,EAAE,CAAC,CAAA;AAEtB,mCAAmC;AACnC,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW,SAAS,CAAC,CAAA;AAC3F,OAAO,CAAC,GAAG,CAAC,+BAA+B,UAAU,EAAE,CAAC,CAAA;AACxD,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAA;AAEnC,oBAAoB;AACpB,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAC5B,GAAG,CAAC,IAAI,CAAC;IACP,GAAG,EAAE,KAAK;IACV,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ;IAC1B,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI;IACtB,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI;IACtB,UAAU,EAAE,YAAY;CACzB,CAAC,CACH,CAAA;AAED,sBAAsB;AACtB,GAAG,CAAC,GAAG,CAAC,eAAe,EACrB,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE;IAC5B,YAAE,CAAC,QAAQ,CACT,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,EACvC,MAAM,EACN,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QACZ,IAAI,GAAG;YAAE,MAAM,GAAG,CAAA;QAElB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QAC5B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAA;QAElC,OAAO,CAAC,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;IAC5D,CAAC,CACF,CAAA;AACH,CAAC,EAAE,IAAI,CAAC,CACT,CAAA;AAED,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAA;AAC3C,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;AACtB,OAAO,CAAC,GAAG,CAAC,qCAAqC,UAAU,KAAK,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,aAAa,KAAK,CAAC,CAAA","file":"","sourcesContent":["// include other main deps\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport compression from 'compression'\nimport path from 'path'\nimport fs from 'fs'\n// const pkg = require('../package.json')\n\n// load .env using dotenv first\nrequire('dotenv').config()\n\n// instantiate express\nconst app = express()\nconst isProduction = process.env.NODE_ENV === 'production'\n\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(compression())\n\n// static serving from /dist/client\nconst staticPath = path.join(__dirname, `../${isProduction ? 'dist' : '.dist-dev'}/client`)\nconsole.log(`serving static content from ${staticPath}`)\napp.use(express.static(staticPath))\n\n// example API entry\napp.get('/test', (req, res) =>\n  res.json({\n    foo: 'bar',\n    mode: process.env.NODE_ENV,\n    port: process.env.PORT,\n    test: process.env.TEST,\n    production: isProduction,\n  })\n)\n\n// json import support\napp.get('/package.json',\n  (req, res) => setTimeout(() => {\n    fs.readFile(\n      path.join(__dirname, '../package.json'),\n      'utf8',\n      (err, data) => {\n        if (err) throw err\n\n        const pkg = JSON.parse(data)\n        const chance = Math.random() > 0.4\n\n        return (chance && res.json(pkg)) || res.status(403).send()\n      }\n    )\n  }, 1000)\n)\n\nconst serverPort = process.env.PORT || 3000\napp.listen(serverPort)\nconsole.log(`Express server @ http://localhost:${serverPort} (${isProduction ? 'production' : 'development'})\\n`)\n"]}