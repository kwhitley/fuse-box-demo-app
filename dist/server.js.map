{"version":3,"sources":["/src/server/index.js"],"names":[],"mappings":";;;;;;;;;AAAA,0BAA0B;AAC1B,mCAA6B;AAC7B,2CAAoC;AACpC,2CAAqC;AACrC,6BAAuB;AACvB,yBAAmB;AACnB,yCAAyC;AAEzC,+BAA+B;AAC/B,OAAO,CAAC,cAAc,CAAC,CAAA;AAEvB,sBAAsB;AACtB,IAAM,GAAG,GAAG,oBAAO,EAAE,CAAA;AACrB,IAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,CAAA;AAExD,GAAG,CAAC,GAAG,CAAC,wBAAU,CAAC,IAAI,EAAE,CAAC,CAAA;AAC1B,GAAG,CAAC,GAAG,CAAC,wBAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAA;AACnD,GAAG,CAAC,GAAG,CAAC,wBAAW,EAAE,CAAC,CAAA;AAEtB,mCAAmC;AACnC,IAAM,UAAU,GAAG,iBAAI,CAAC,IAAI,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAA;AACzD,OAAO,CAAC,GAAG,CAAC,iCAA+B,UAAY,CAAC,CAAA;AACxD,GAAG,CAAC,GAAG,CAAC,oBAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAA;AACnC,iDAAiD;AAEjD,oBAAoB;AACpB,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,UAAC,GAAG,EAAE,GAAG;IACxB,OAAA,GAAG,CAAC,IAAI,CAAC;QACP,GAAG,EAAE,KAAK;QACV,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ;QAC1B,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI;QACtB,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI;QACtB,UAAU,EAAE,UAAU;KACvB,CAAC;AANF,CAME,CACH,CAAA;AAED,sBAAsB;AACtB,GAAG,CAAC,GAAG,CAAC,eAAe,EACrB,UAAC,GAAG,EAAE,GAAG,IAAK,OAAA,UAAU,CAAC;IACvB,eAAE,CAAC,QAAQ,CACT,iBAAI,CAAC,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,EACvC,MAAM,EACN,UAAC,GAAG,EAAE,IAAI;QACR,IAAI,GAAG;YAAE,MAAM,GAAG,CAAA;QAElB,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QAC5B,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAA;QAElC,OAAO,CAAC,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;IAC5D,CAAC,CACF,CAAA;AACH,CAAC,EAAE,IAAI,CAAC,EAbM,CAaN,CACT,CAAA;AAED,IAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAA;AAC3C,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;AACtB,OAAO,CAAC,GAAG,CAAC,uCAAqC,UAAU,WAAK,UAAU,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,aAAa,SAAK,CAAC,CAAA","file":"","sourcesContent":["// include other main deps\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport compression from 'compression'\nimport path from 'path'\nimport fs from 'fs'\n// const pkg = require('../package.json')\n\n// load .env using dotenv first\nrequire('env-autoload')\n\n// instantiate express\nconst app = express()\nconst PRODUCTION = process.env.NODE_ENV === 'production'\n\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(compression())\n\n// static serving from /dist/client\nconst staticPath = path.join(__dirname, '../dist/client')\nconsole.log(`serving static content from ${staticPath}`)\napp.use(express.static(staticPath))\n// app.use('/client', express.static(staticPath))\n\n// example API entry\napp.get('/test', (req, res) =>\n  res.json({\n    foo: 'bar',\n    mode: process.env.NODE_ENV,\n    port: process.env.PORT,\n    test: process.env.TEST,\n    production: PRODUCTION,\n  })\n)\n\n// json import support\napp.get('/package.json',\n  (req, res) => setTimeout(() => {\n    fs.readFile(\n      path.join(__dirname, '../package.json'),\n      'utf8',\n      (err, data) => {\n        if (err) throw err\n\n        const pkg = JSON.parse(data)\n        const chance = Math.random() > 0.4\n\n        return (chance && res.json(pkg)) || res.status(403).send()\n      }\n    )\n  }, 1000)\n)\n\nconst serverPort = process.env.PORT || 3000\napp.listen(serverPort)\nconsole.log(`Express server @ http://localhost:${serverPort} (${PRODUCTION ? 'production' : 'development'})\\n`)\n"]}